/**
 * BeerProto
 *
 * Another beer format, written in protocol buffer.
 *
 * Copyright (c) 2020 Ross Merrigan
 */
syntax = "proto3";

package beerproto.v1;

option csharp_namespace = "BeerProto.Protobuf";
option cc_enable_arenas = true;
option java_package = "com.beerproto.protobuf";
option java_multiple_files = true;
option objc_class_prefix = "BP";
option go_package = "github.com/beerproto/beerproto_go";

message Recipe {
  string id = 1;
  // A collection of steps providing process information for common mashing procedures
  repeated MashProcedureType mashes = 2;
  // Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer
  repeated RecipeType recipes = 3;
  // Records for adjuncts which do not contribute to the gravity of the beer
  repeated MiscellaneousType miscellaneous_ingredients = 4;
  // Records detailing the characteristics of the beer styles for which judging guidelines have been established
  repeated StyleType styles = 5;
  // A collection of steps providing process information for common fermentation procedures
  repeated FermentationProcedureType fermentations = 6;
  // A collection of steps providing process information for common boil procedures
  repeated BoilProcedureType boil = 7;
  // Explicitly encode version within list of records
  double version = 8;
  // Records for any ingredient that contributes to the gravity of the beer
  repeated FermentableType fermentables = 9;
  // Records detailing the wide array of unique cultures
  repeated CultureInformation cultures = 10;
  // Provides necessary information for brewing equipment
  repeated EquipmentType equipments = 11;
  // A collection of steps providing process information for common packaging procedures
  repeated PackagingProcedureType packaging = 12;
  // Records detailing the many properties of unique hop varieties
  repeated VarietyInformation hop_varieties = 13;
  // Records for water profiles used in brewing
  repeated WaterBase profiles = 14;
}

// This defines the procedure for performing unique mashing processes
message MashProcedureType {
  string id = 1;
  // Initial grain temperature prior to the start of the mash
  TemperatureType grain_temperature = 2;
  string notes = 3;
  repeated MashStepType mash_steps = 4;
  string name = 5;
}

// MashStepType - a per step representation occurring during the mash
message MashStepType{
  string id = 1;
  TimeType step_time = 2;
  // The amount of time  that passes before this step begins. eg moving from a mash step (step 1) of 148F, to a new temperature step of 156F (step 2) may take 8 minutes to heat the mash. Step 2 would have a ramp time of 8 minutes
  TimeType ramp_time = 3;
  TemperatureType end_temperature = 4;
  string description = 5;
  // Temperature of the water for an infusion step
  TemperatureType infuse_temperature = 6;
  AcidityType start_ph = 7;
  AcidityType end_ph = 8;
  string name = 9;
  MashStepTypeType type = 10;
  VolumeType amount = 11;
  TemperatureType step_temperature = 12;
  // Also known as the mash thickness. eg 1.75 qt/lb or 3.65 L/kg
  SpecificVolumeType water_grain_ratio = 13;

  enum MashStepTypeType{
    MASH_STEP_TYPE_TYPE_UNSPECIFIED = 0;
    MASH_STEP_TYPE_TYPE_INFUSION = 1;
    MASH_STEP_TYPE_TYPE_TEMPERATURE = 2;
    MASH_STEP_TYPE_TYPE_DECOCTION = 3;
    MASH_STEP_TYPE_TYPE_SOURING_MASH = 4;
    MASH_STEP_TYPE_TYPE_SOURING_WORT = 5;
    MASH_STEP_TYPE_TYPE_DRAIN_MASH_TUN = 6;
    MASH_STEP_TYPE_TYPE_SPARGE = 7;
  }
}

message TimeRangeType{
  TimeType minimum = 1;
  TimeType maximum = 2;
}

message TimeType{
  int64 value = 1;
  TimeUnitType unit = 2;

  enum TimeUnitType {
    TIME_UNIT_TYPE_UNSPECIFIED = 0;
    // sec
    TIME_UNIT_TYPE_SEC = 1;
    // min
    TIME_UNIT_TYPE_MIN = 2;
    // hr
    TIME_UNIT_TYPE_HR = 3;
    // day
    TIME_UNIT_TYPE_DAY = 4;
    // week
    TIME_UNIT_TYPE_WEEK = 5;
  }
}

message AcidityType{
  double value = 1;
  AcidityUnitType unit = 2;
}

enum AcidityUnitType{
    ACIDITY_UNIT_TYPE_UNSPECIFIED = 0;
    ACIDITY_UNIT_TYPE_PH = 1;
}

message ViscosityRangeType{
  ViscosityType minimum = 1;
  ViscosityType maximum = 2;
}

message ViscosityType{
  double value = 1;
  ViscosityUnitType unit = 2;
}

enum ViscosityUnitType {
  VISCOSITY_UNIT_TYPE_UNSPECIFIED = 0;
  // cP
  VISCOSITY_UNIT_TYPE_CP = 1;
  // mPa-s
  VISCOSITY_UNIT_TYPE_MPAS = 2;
}

message VolumeType{
  double value = 1;
  VolumeUnitType unit = 2;

  enum VolumeUnitType{
    VOLUME_UNIT_TYPE_UNSPECIFIED = 0;
    // ml
    VOLUME_UNIT_TYPE_ML = 1;
    // l
    VOLUME_UNIT_TYPE_L = 2;
    // tsp
    VOLUME_UNIT_TYPE_TSP = 3;
    // tbsp
    VOLUME_UNIT_TYPE_TBSP = 4;
    // floz
    VOLUME_UNIT_TYPE_FLOZ = 5;
    // cup
    VOLUME_UNIT_TYPE_CUP = 6;
    // pt
    VOLUME_UNIT_TYPE_PT = 7;
    // qt
    VOLUME_UNIT_TYPE_QT = 8;
    // gal
    VOLUME_UNIT_TYPE_GAL = 9;
    // bbl
    VOLUME_UNIT_TYPE_BBL = 10;
    // ifloz
    VOLUME_UNIT_TYPE_IFOZ = 11;
    // ipt
    VOLUME_UNIT_TYPE_IPT = 12;
    // iqt
    VOLUME_UNIT_TYPE_IQT = 13;
    // igal
    VOLUME_UNIT_TYPE_IGAL = 14;
    // ibbl
    VOLUME_UNIT_TYPE_IBBL = 15;
  }
}

message SpecificVolumeType{
  double value = 1;
  SpecificVolumeUnitType unit = 2;

  enum SpecificVolumeUnitType{
    SPECIFIC_VOLUME_UNIT_TYPE_UNSPECIFIED = 0;
    // qt/lb
    SPECIFIC_VOLUME_UNIT_TYPE_QTLB = 1;
    // gal/lb
    SPECIFIC_VOLUME_UNIT_TYPE_GALLB = 2;
    // gal/oz
    SPECIFIC_VOLUME_UNIT_TYPE_GALOZ = 3;
    // l/g
    SPECIFIC_VOLUME_UNIT_TYPE_LG = 4;
    // l/kg
    SPECIFIC_VOLUME_UNIT_TYPE_LKG = 5;
    // floz/oz
    SPECIFIC_VOLUME_UNIT_TYPE_FLOZOZ = 6;
    // m^3/kg
    SPECIFIC_VOLUME_UNIT_TYPE_M3KG = 7;
    // ft^3/lb
    SPECIFIC_VOLUME_UNIT_TYPE_FT3LB = 8;
  }
}

// RecipeType composes the information stored in a recipe
message RecipeType {
  string id = 1;
  // Used to store each efficiency component, including conversion, and brewhouse
  EfficiencyType efficiency = 2;
  RecipeStyleType style = 3;
  // Used to differentiate the which IBU formula is being used in a recipe. If the formula is modified in any way, e.g. to support whirlpool/flameout additions, then please use `Other` for transparency
  IBUEstimateType ibu_estimate = 4;
  // The color of the finished beer, using SRM or EBC
  ColorType color_estimate = 5;
  // The final beer pH at the end of fermentation
  AcidityType beer_ph = 6;
  string name = 7;
  RecipeTypeType type = 8;
  string coauthor = 9;
  // The gravity of wort when transffered to the fermenter
  GravityType original_gravity = 10;
  // The gravity of beer at the end of fermentation
  GravityType final_gravity = 11;
  // The final carbonation of the beer when packaged or served
  double  carbonation = 12;
  // FermentationProcedureType defines the procedure for performing fermentation
  FermentationProcedureType fermentation = 13;
  string author = 14;
  // A collection of all ingredients used for the recipe
  IngredientsType ingredients = 15;
  // This defines the procedure for performing unique mashing processes
  MashProcedureType mash = 16;
  // Describes the procedure for packaging your beverage
  PackagingProcedureType packaging = 17;
  // Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
  BoilProcedureType boil = 18;
  // Used to store subjective tasting notes, and rating
  TasteType taste = 19;
  double calories_per_pint = 20;
  string created = 21;
  // The volume into the fermenter
  VolumeType batch_size = 22;
  string notes = 23;
  PercentType alcohol_by_volume = 24;
  // The total apparent attenuation of the finished beer after fermentation
  PercentType apparent_attenuation = 25;

  enum RecipeTypeType {
    RECIPE_TYPE_TYPE_UNSPECIFIED = 0;
    // cider
    RECIPE_TYPE_TYPE_CIDER = 1;
    // kombucha
    RECIPE_TYPE_TYPE_KOMBUCHA = 2;
    // soda
    RECIPE_TYPE_TYPE_SODA = 3;
    // other
    RECIPE_TYPE_TYPE_OTHER = 4;
    // mead
    RECIPE_TYPE_TYPE_MEAD = 5;
    // wine
    RECIPE_TYPE_TYPE_WINE = 6;
    // extract
    RECIPE_TYPE_TYPE_EXTRACT = 7;
    // partial mash
    RECIPE_TYPE_TYPE_PARTIAL_MASH = 8;
    // all grain
    RECIPE_TYPE_TYPE_ALL_GRAIN = 9;
  }
}


// The efficiencyType stores each efficiency component
message EfficiencyType{
  // The percentage of sugar from the grain yield that is extracted and converted during the mash
  PercentType conversion = 1;
  // The percentage of sugar that makes it from the mash tun to the kettle
  PercentType lauter = 2;
  // The percentage of sugar that makes it from the grain to the kettle
  PercentType mash = 3;
  // The percentage of sugar that makes it from the grain to the fermenter
  PercentType brewhouse = 4;
}

// RecipeStyleType defines style information stored in a recipe record
message RecipeStyleType{
  StyleCategories type = 1;
  string name = 2;
  string category = 3;
  int32 category_number = 4;
  string style_letter = 5;
  string style_guide = 6;

  enum StyleCategories{
    STYLE_CATEGORIES_UNSPECIFIED = 0;
    // beer
    STYLE_CATEGORIES_BEER = 1;
    // cider
    STYLE_CATEGORIES_CIDER = 2;
    // kombucha
    STYLE_CATEGORIES_KOMBUCHA = 3;
    // mead
    STYLE_CATEGORIES_MEAD = 4;
    // soda
    STYLE_CATEGORIES_SODA = 5;
    // wine
    STYLE_CATEGORIES_WINE = 6;
    // other
    STYLE_CATEGORIES_OTHER = 7;
  }
}

// Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
message IBUEstimateType{
  IBUMethodType method = 1;

  enum IBUMethodType {
    IBU_METHOD_TYPE_UNSPECIFIED = 0;
    // Rager
    IBU_METHOD_TYPE_RAGER = 1;
    // Tinseth
    IBU_METHOD_TYPE_TINSETH = 2;
    // Garetz
    IBU_METHOD_TYPE_GARETZ = 3;
    // Other
    IBU_METHOD_TYPE_OTHER = 4;
  }
}



message IngredientsType{
  // miscellaneous_additions collects all the miscellaneous items for use in a recipe
  repeated MiscellaneousAdditionType miscellaneous_additions = 1;
  // culture_additions collects all the culture items for use in a recipe
  repeated CultureAdditionType culture_additions = 2;
  // water_additions collects all the water items for use in a recipe
  repeated WaterAdditionType water_additions = 3;
  // fermentable_additions collects all the fermentable ingredients for use in a recipe
  repeated FermentableAdditionType fermentable_additions = 4;
  // hop_additions collects all the hops for use in a recipe
  repeated HopAdditionType hop_additions = 5;
}

// MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
message MiscellaneousAdditionType{
  string id =1;
  string name = 2;
  string producer = 3;
  // The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
  TimingType timing = 4;
  string product_id = 5;
  MiscellaneousBaseType type = 6;

  oneof amount  {
    MassType mass = 7;
    UnitType unit = 8;
    VolumeType volume = 9;
  }
}
message MassType{
  double value = 1;
  MassUnitType unit = 2;
}

enum MassUnitType{
  MASS_UNIT_TYPE_UNSPECIFIED = 0;
  // mg
  MASS_UNIT_TYPE_MG = 1;
  // g
  MASS_UNIT_TYPE_G = 2;
  // kg
  MASS_UNIT_TYPE_KG = 3;
  // lb
  MASS_UNIT_TYPE_LB = 4;
  // oz
  MASS_UNIT_TYPE_OZ = 5;
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
message UnitType {
  double value = 1;
  UnitUnitType unit = 2;
}

enum UnitUnitType {
  UNIT_UNIT_TYPE_UNSPECIFIED = 0;
  // 1
  UNIT_UNIT_TYPE_ONE = 1;
  // unit
  UNIT_UNIT_TYPE_UNIT = 2;
  // each
  UNIT_UNIT_TYPE_EACH = 3;
  // dimensionless
  UNIT_UNIT_TYPE_DIMENSIONLESS = 4;
  // pkg
  UNIT_UNIT_TYPE_PKG = 5;
}

// CultureAdditionType collects the attributes of each culture ingredient for use in a recipe
message CultureAdditionType{
  string id = 1;
  CultureBaseForm form = 2;
  string product_id = 3;
  string name = 4;
  int32 cell_count_billions = 5;
  int32 times_cultured = 6;
  string producer = 7;
  CultureBaseType type = 8;
  // The expected, or measured apparent attenuation for a given culture in a given recipe. In comparison to attenuation range, this is a single value.
  PercentType attenuation = 9;
  // The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
  TimingType timing = 10;

  oneof amount  {
    MassType mass = 11;
    UnitType unit = 12;
    VolumeType volume = 13;
  }
}

enum CultureBaseForm{
  CULTURE_BASE_FORM_UNSPECIFIED = 0;
  // liquid
  CULTURE_BASE_FORM_LIQUID = 1;
  // dry
  CULTURE_BASE_FORM_DRY = 2;
  // slant
  CULTURE_BASE_FORM_SLANT = 3;
  // culture
  CULTURE_BASE_FORM_CULTURE = 4;
  // dregs
  CULTURE_BASE_FORM_DREGS = 5;
}

enum CultureBaseType{
  CULTURE_BASE_TYPE_UNSPECIFIED = 0;
  // ale
  CULTURE_BASE_TYPE_ALE = 1;
  // bacteria
  CULTURE_BASE_TYPE_BACTERIA = 2;
  // brett
  CULTURE_BASE_TYPE_BRETT = 3;
  // champagne
  CULTURE_BASE_TYPE_CHAMPAGNE = 4;
  // kveik
  CULTURE_BASE_TYPE_KVEIK = 5;
  // lacto
  CULTURE_BASE_TYPE_LACTO = 6;
  // lager
  CULTURE_BASE_TYPE_LAGER = 7;
  // malolactic
  CULTURE_BASE_TYPE_MALOLACTIC = 8;
  // mixed-culture
  CULTURE_BASE_TYPE_MIXED_CULTURE = 9;
  // other
  CULTURE_BASE_TYPE_OTHER = 10;
  // pedio
  CULTURE_BASE_TYPE_PEDIO = 11;
  // spontaneous
  CULTURE_BASE_TYPE_SPONTANEOUS = 12;
  // wine
  CULTURE_BASE_TYPE_WINE = 13;
}

// The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
message TimingType{
  // What time during a process step is added, eg a value of 2 days for a dry hop addition would be added 2 days into the fermentation step.
  TimeType time = 1;
  // How long an ingredient addition remains, this was referred to as time in the BeerXML standard. E.G. A 40 minute hop boil additions means to boil for 40 minutes, and a 2 day duration for a dry hop means to remove it after 2 days.
  TimeType duration = 2;
  // A continuous addition is spread out evenly and added during the entire process step, eg 60 minute IPA by dogfish head takes all ofthe hop additions and adds them throughout the entire boil.
  bool continuous = 3;
  // Used to indicate when an addition is added based on a desired specific gravity. E.G. Add dry hop at when SG is 1.018.
  GravityType specific_gravity = 4;
  // Used to indicate when an addition is added based on a desired specific pH. eg Add brett when pH is 3.4.
  AcidityType ph = 5;
  // Used to indicate what step this ingredient timing addition is referencing. EG A value of 2 for add_to_fermentation would mean to add during the second fermentation step.
  int32 step = 6;
  UseType use = 7;
}

enum UseType{
  USE_TYPE_UNSPECIFIED = 0;
  // add to mash
  USE_TYPE_ADD_TO_MASH = 1;
  // add to boil
  USE_TYPE_ADD_TO_BOIL = 2;
  // add to fermentation
  USE_TYPE_ADD_TO_FERMENTATION = 3;
  // add to package
  USE_TYPE_ADD_TO_PACKAGE = 4;
}

// WaterAdditionType collects the attributes of each water addition for use in a recipe
message WaterAdditionType{
  string id = 1;
  ConcentrationType flouride = 2;
  ConcentrationType sulfate = 3;
  string producer = 4;
  ConcentrationType nitrate = 5;
  ConcentrationType nitrite = 6;
  ConcentrationType chloride = 7;
  VolumeType amount = 8;
  string name = 89;
  ConcentrationType potassium = 10;
  ConcentrationType magnesium = 11;
  ConcentrationType iron = 12;
  ConcentrationType bicarbonate = 13;
  ConcentrationType calcium = 14;
  ConcentrationType carbonate = 15;
  ConcentrationType sodium = 16;
}

message ConcentrationRangeType{
  ConcentrationType minimum = 1;
  ConcentrationType maximum = 2;
}

message ConcentrationType{
  double value = 1;
  ConcentrationUnitType unit = 2;
}

enum ConcentrationUnitType{
  CONCENTRATION_UNIT_TYPE_UNSPECIFIED = 0;
  // ppm
  CONCENTRATION_UNIT_TYPE_PPM = 1;
  // ppb
  CONCENTRATION_UNIT_TYPE_PPB = 2;
  // mg/l
  CONCENTRATION_UNIT_TYPE_MGL = 3;
  // mg/100g
  CONCENTRATION_UNIT_TYPE_MG100L = 4;
}

// FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill
message FermentableAdditionType{
  string id = 1;
  FermentableBaseType type = 2;
  string origin = 3;
  GrainGroup grain_group = 4;
  YieldType yield = 5;
  ColorType color = 6;
  string name = 7;
  string producer = 8;
  string product_id = 9;
  // The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
  TimingType timing = 10;

  oneof amount  {
    MassType mass = 11;
    VolumeType volume = 12;
  }

}

// The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types
message YieldType{
  // Percentage yield compared to succrose of a fine grind. eg 80%
  PercentType fine_grind = 1;
  // Percentage yield compared to succrose of a coarse grind. eg 78%
  PercentType coarse_grind = 2;
  // The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%
  PercentType fine_coarse_difference = 3;
  // The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
  GravityType potential = 4;
}

// HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bill.
message HopAdditionType{
  string id = 1;
  PercentType beta_acid = 2;
  string producer = 3;
  string origin = 4;
  string year = 5;
  HopVarietyBaseForm form = 6;
  // The timing object fully describes the timing of an addition with options for a basis on time, gravity, or pH at any process step
  TimingType timing = 7;
  string name = 8;
  string product_id = 9;
  PercentType alpha_acid = 10;
  oneof amount  {
    MassType mass = 11;
    VolumeType volume = 12;
  }
}

message TasteType{
  string notes = 1;
  double rating = 2;
}

// MiscellaneousType collects the attributes of an ingredient to store as record information
message MiscellaneousType {
  string id = 1;
  // Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
  string use_for = 2;
  string notes = 3;
  string name = 4;
  string producer = 5;
  string product_id = 6;
  MiscellaneousBaseType type = 7;
  MiscellaneousInventoryType inventory = 8;
}

enum MiscellaneousBaseType{
  MISCELLANEOUS_BASE_TYPE_UNSPECIFIED = 0;
  // spice
  MISCELLANEOUS_BASE_TYPE_SPICE = 1;
  // fining
  MISCELLANEOUS_BASE_TYPE_FINING = 2;
  // water agent
  MISCELLANEOUS_BASE_TYPE_WATER_AGENT = 3;
  // herb
  MISCELLANEOUS_BASE_TYPE_HERB = 4;
  // flavor
  MISCELLANEOUS_BASE_TYPE_FLAVOR = 5;
  // wood
  MISCELLANEOUS_BASE_TYPE_WOOD = 6;
  // other
  MISCELLANEOUS_BASE_TYPE_OTHER = 7;
}

message MiscellaneousInventoryType{
  oneof amount  {
    MassType mass = 1;
    UnitType unit = 2;
    VolumeType volume = 3;
  }
}

// StyleType provide information for Style categorization
message StyleType{
  string id = 1;
  string aroma = 2;
  string ingredients = 3;
  int32 category_number = 4;
  string notes = 5;
  string flavor = 6;
  string mouthfeel = 7;
  GravityRangeType final_gravity = 8;
  string style_guide = 9;
  ColorRangeType color = 10;
  GravityRangeType original_gravity = 11;
  string examples = 12;
  string name = 13;
  CarbonationRangeType carbonation = 14;
  PercentRangeType alcohol_by_volume = 15;
  BitternessRangeType international_bitterness_units = 16;
  string appearance = 17;
  string category = 18;
  string style_letter = 19;
  StyleCategories type = 20;
  string overall_impression = 21;

  enum StyleCategories{
    STYLE_CATEGORIES_UNSPECIFIED = 0;
    // beer
    STYLE_CATEGORIES_BEER = 1;
    // cider
    STYLE_CATEGORIES_CIDER = 2;
    // kombucha
    STYLE_CATEGORIES_KOMBUCHA = 3;
    // mead
    STYLE_CATEGORIES_MEAD = 4;
    // soda
    STYLE_CATEGORIES_SODA = 5;
    // wine
    STYLE_CATEGORIES_WINE = 6;
    // other
    STYLE_CATEGORIES_OTHER = 7;
  }
}

message BitternessRangeType{
  BitternessType minimum = 1;
  BitternessType maximum = 2;
}

message BitternessType{
  double value = 1;
  BitternessUnitType unit = 2;

  enum BitternessUnitType{
    BITTERNESS_UNIT_TYPE_UNSPECIFIED = 0;
    // IBUs
    BITTERNESS_UNIT_TYPE_IBUS = 1;
  }
}

message PercentRangeType{
  PercentType minimum = 1;
  PercentType maximum = 2;
}

message PercentType{
  double value = 1;
  PercentUnitType unit = 2;

  enum PercentUnitType{
    PERCENT_UNIT_TYPE_UNSPECIFIED = 0;
    // %
    PERCENT_UNIT_TYPE_PERCENT_SIGN = 1;
  }
}

message GravityRangeType{
  GravityType minimum = 1;
  GravityType maximum = 2;
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
message GravityType{
  double value = 1;
  GravityUnitType unit = 2;
}

enum GravityUnitType{
    GRAVITY_UNIT_TYPE_UNSPECIFIED = 0;
    // sg
    GRAVITY_UNIT_TYPE_SG = 1;
    // plato
    GRAVITY_UNIT_TYPE_PLATO = 2;
    // brix
    GRAVITY_UNIT_TYPE_BRIX = 3;
  }

message ColorRangeType{
  ColorType minimum = 1;
  ColorType maximum = 2;
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
message ColorType{
  double value = 1;
  ColorUnitType unit = 2;
}

enum ColorUnitType {
  COLOR_UNIT_TYPE_UNSPECIFIED = 0;
  // EBC
  COLOR_UNIT_TYPE_EBC = 1;
  // Lovi
  COLOR_UNIT_TYPE_LOVI = 2;
  // SRM
  COLOR_UNIT_TYPE_SRM = 3;
}

message CarbonationRangeType{
  CarbonationType minimum = 1;
  CarbonationType maximum = 2;
}

message CarbonationType {
  double value = 1;
  CarbonationUnitType unit = 2;
}

enum CarbonationUnitType {
  CARBONATION_UNIT_TYPE_UNSPECIFIED = 0;
  // vols
  CARBONATION_UNIT_TYPE_VOLS = 1;
  // g/l
  CARBONATION_UNIT_TYPE_GL = 2;
}

// FermentationProcedureType defines the procedure for performing fermentation
message FermentationProcedureType{
  string id = 1;
  string description = 2;
  string notes = 3;
  repeated FermentationStepType fermentation_steps = 4;
  string name = 5;
}

// FermentationStepType - a per step representation of a fermentation action
message FermentationStepType{
  string id = 1;
  string name = 2;
  TemperatureType end_temperature = 3;
  TimeType step_time = 4;
  // Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
  bool free_rise = 5;
  GravityType start_gravity = 6;
  GravityType end_gravity = 7;
  AcidityType start_ph = 8;
  string description = 9;
  TemperatureType start_temperature = 10;
  AcidityType  end_ph = 11;
  string vessel = 12;
  // Vessel pressure indicates the pressure applied within the fermentation vessel.
  PercentType vessel_pressure = 13;
}

// BoilProcedureType defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
message BoilProcedureType {
  string id = 1;
  VolumeType pre_boil_size = 2;
  TimeType boil_time = 3;
  repeated BoilStepType boil_steps = 4;
  string name = 5;
  string description = 6;
  string notes = 7;
}

// BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling
message BoilStepType{
  string id = 1;
  GravityType end_gravity = 2;
  BoilStepTypeChillingType chilling_type = 3;
  string description = 4;
  TemperatureType end_temperature = 5;
  // The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
  TimeType ramp_time = 6;
  TimeType step_time = 7;
  GravityType start_gravity = 8;
  AcidityType start_ph = 9;
  AcidityType end_ph = 10;
  string name = 11;
  TemperatureType start_temperature = 12;
}

enum BoilStepTypeChillingType{
  BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED = 0;
  // batch
  BOIL_STEP_TYPE_CHILLING_TYPE_BATCH = 1;
  // inline
  BOIL_STEP_TYPE_CHILLING_TYPE_INLINE = 2;
}

// FermentableType collects the attributes of a fermentable ingredient to store as record information
message FermentableType{
  string id = 1;
  // The recommended maximum percentage to use in a grain bill.
  PercentType max_in_batch = 2;
  // True if the fermentable must be mashed, false if it can be steeped.
  bool recommend_mash = 3;
  // The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
  PercentType protein = 4;
  string product_id = 5;
  GrainGroup grain_group = 6;
  YieldType yield = 7;
  FermentableBaseType type = 8;
  string producer = 9;
  // Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
  double alpha_amylase = 10;
  ColorType color = 11;
  string name = 12;
  // Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
  DiastaticPowerType diastatic_power = 13;
  PercentType moisture = 14;
  string origin = 15;
  FermentableInventoryType inventory = 16;
  // The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
  PercentType kolbach_index = 17;
  // Used to indicate the 'crystallized' percentage of starches for crystal malts.
  PercentType glassy = 18;
  // The percentage of grain that masses through sieves with gaps of 7/64 and 6/64, desired values of 80% or higher which indicate plump kernels.
  PercentType plump = 19;
  PercentType half = 20;
  // The opposite of glassy, a mealy kernel is one that is not glassy. Base malt should be at least 90%, single step mashes generally require 95% or higher.
  PercentType mealy = 21;
  // The Percentage of grain that makes it through a thin mesh screen, typically 5/64 inch. Values less than 3% are desired.
  PercentType thru = 22;
  // Friability is the measure of a malts ability to crumble during the crush, and is used as an indicator for easy gelatinization of the grain and starches, as well as modification of the malt. Value of 85% of higher indicates a well modified malt and is suitable for single step mashes. Lower values may require a step mash.
  PercentType friability = 23;
  // The pH of the resultant wort for 1 lb of grain mashed in 1 gallon of distilled water. Used in many water chemistry / mash pH prediction software.
  AcidityType di_ph = 24;
  // The measure of wort viscosity, typically associated with the breakdown of beta-glucans. The higher the viscosity, the greater the need for a glucan rest and the less suitable for a fly sparge.
  ViscosityType viscosity = 25;
  // The amount of DMS precursors, namely S-methyl methionine (SMM) and dimethyl sulfoxide (DMSO) in the malt which convert to dimethyl sulfide (DMS).
  ConcentrationType dms_p = 26;
  // Free Amino Nitrogen (FAN) is a critical yeast nutrient. Typical values for base malt is 170.
  ConcentrationType fan = 27;
  // Fermentability - Used in Extracts to indicate a baseline typical attenuation for a typical medium attenuation yeast.
  PercentType fermentability = 28;
  // Values of 180 or more may suggest a glucan rest and avoiding fly sparging.
  ConcentrationType beta_glucan = 29;
  string notes = 30;
}

enum FermentableBaseType{
  FERMENTABLE_BASE_TYPE_UNSPECIFIED = 0;
  // dry extract
  FERMENTABLE_BASE_TYPE_DRY_EXTRACT = 1;
  // extract
  FERMENTABLE_BASE_TYPE_EXTRACT = 2;
  // grain
  FERMENTABLE_BASE_TYPE_GRAIN = 3;
  // sugar
  FERMENTABLE_BASE_TYPE_SUGAR = 4;
  // fruit
  FERMENTABLE_BASE_TYPE_FRUIT = 5;
  // juice
  FERMENTABLE_BASE_TYPE_JUICE = 6;
  // honey
  FERMENTABLE_BASE_TYPE_HONEY = 7;
  // other
  FERMENTABLE_BASE_TYPE_OTHER = 8;
}

enum GrainGroup{
  GRAIN_GROUP_UNSPECIFIED = 0;
  // base
  GRAIN_GROUP_BASE = 1;
  // caramel
  GRAIN_GROUP_CARAMEL = 2;
  // flaked
  GRAIN_GROUP_FLAKED = 3;
  // roasted
  GRAIN_GROUP_ROASTED = 4;
  // specialty
  GRAIN_GROUP_SPECIALTY = 5;
  // smoked
  GRAIN_GROUP_SMOKED = 6;
  // adjunct
  GRAIN_GROUP_ADJUNCT = 7;
}

message FermentableInventoryType{
  oneof amount  {
    MassType mass = 1;
    VolumeType volume = 2;
  }
}

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
message DiastaticPowerType{
  double value = 1;
  DiastaticPowerUnitType unit = 2;
}

enum DiastaticPowerUnitType{
  DIASTATIC_POWER_UNIT_TYPE_UNSPECIFIED = 0;
  // Lintner
  DIASTATIC_POWER_UNIT_TYPE_LINTNER = 1;
  // Windisch–Kolbach
  DIASTATIC_POWER_UNIT_TYPE_WK = 2;
}

// CultureInformation collects the attributes of a microbial culture
message CultureInformation{
  string id = 1;
  CultureBaseForm form = 2;
  string producer = 3;
  // The recommended temperature range of fermentation by the culture producer.
  TemperatureRangeType temperature_range = 4;
  string notes = 5;
  // Recommended styles for a particular culture.
  string best_for = 6;
  CultureInventoryType inventory = 7;
  string product_id = 8;
  string name = 9;
  // The recommended limit of abv by the culture producer before attenuation stops.
  PercentType alcohol_tolerance = 10;
  // A glucoamylase positive culture is capable of producing glucoamylase, the enzyme produced through expression of the diastatic gene, which allows yeast to attenuate dextrins and starches leading to a very low FG. This is positive in some saison/brett yeasts as well as the new gulo hybrid by Omega yeast labs.
  bool glucoamylase = 11;
  CultureBaseType type = 12;
  // Floculation refers to the ability of yeast to aggregate to form large flocs which drop out of suspension.
  QualitativeRangeType flocculation = 13;
  PercentRangeType attenuation_range = 14;
  // Maximum number of times to reuse a culture before a new lab source is recommended.
  int32 max_reuse = 15;
  // A POF+ culture is capable of producing phenols, which is a common distinctive property of saison, and brett yeasts.
  bool pof = 16;
  Zymocide zymocide = 17;
}


enum QualitativeRangeType{
  QUALITATIVE_RANGE_TYPE_UNSPECIFIED = 0;
  // very low
  QUALITATIVE_RANGE_TYPE_VERY_LOW = 1;
  // low
  QUALITATIVE_RANGE_TYPE_LOW = 2;
  // medium low
  QUALITATIVE_RANGE_TYPE_MEDIUM_LOW = 3;
  // medium
  QUALITATIVE_RANGE_TYPE_MEDIUM = 4;
  // medium high
  QUALITATIVE_RANGE_TYPE_MEDIUM_HIGH = 5;
  // high
  QUALITATIVE_RANGE_TYPE_HIGH = 6;
  // very high
  QUALITATIVE_RANGE_TYPE_VERY_HIGH = 7;
}

message TemperatureRangeType{
  TemperatureType minimum = 1;
  TemperatureType maximum = 2;
}

message TemperatureType{
  double value = 1;
  TemperatureUnitType unit = 2;


}

enum TemperatureUnitType {
    TEMPERATURE_UNIT_TYPE_UNSPECIFIED = 0;
    TEMPERATURE_UNIT_TYPE_C = 1;
    TEMPERATURE_UNIT_TYPE_F = 2;
  }

// Zymocide, also known as killer yeast properties, is common among wine yeast. There are also some ale and brett yeasts that are immune to some zymocidic properties, these are known as killer neutral
message Zymocide{
  bool no1 = 1;
  bool no2 = 2;
  bool no28 = 3;
  bool klus = 4;
  bool neutral = 5;
}

message CultureInventoryType{
  VolumeType liquid = 1;
  MassType dry = 2;
  VolumeType slant = 3;
  VolumeType culture = 4;
}

// Provides necessary information for brewing equipment set
message EquipmentType{
  string id = 1;
  string name = 2;
  repeated EquipmentItemType equipment_items = 3;
  PercentType brewhouse_efficiency = 4;
}

// EquipmentType provides necessary information for individual brewing equipment
message EquipmentItemType{
  string id = 1;
  string notes = 2;
  // The volume boiled off during 1 hour, measured before and after at room temperature.
  VolumeType boil_rate_per_hour = 3;
  string type = 4;
  EquipmentBaseForm form = 5;
  // The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
  VolumeType drain_rate_per_minute = 6;
  // The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
  SpecificHeatType specific_heat = 7;
  // The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
  SpecificVolumeType grain_absorption_rate = 8;
  string name = 9;
  VolumeType maximum_volume = 10;
  // The weight of the piece of equipment, especially important for when the mashtun is not preheated.
  MassType weight = 11;
  VolumeType loss = 12;
  PercentType efficiency = 13;

  enum EquipmentBaseForm{
    EQUIPMENT_BASE_FORM_UNSPECIFIED = 0;
    // HLT
    EQUIPMENT_BASE_FORM_HLT = 1;
    // Mash Tun
    EQUIPMENT_BASE_FORM_MASH_TUN = 2;
    // Lauter Tun
    EQUIPMENT_BASE_FORM_LAUTER_TUN = 3;
    // Brew Kettle
    EQUIPMENT_BASE_FORM_BREW_KETTLE = 4;
    // Fermenter
    EQUIPMENT_BASE_FORM_FERMENTER = 5;
    // Aging Vessel
    EQUIPMENT_BASE_FORM_AGING_VESSEL = 6;
    // Packaging Vessel
    EQUIPMENT_BASE_FORM_PACKAGING_VESSEL = 7;
  }
}

message SpecificHeatType{
  double value = 1;
  SpecificHeatUnitType unit = 2;
}

enum SpecificHeatUnitType{
  SPECIFIC_HEAT_UNIT_TYPE_UNSPECIFIED = 0;
  // Cal/(g C)
  SPECIFIC_HEAT_UNIT_TYPE_CALGC = 1;
  // J/(kg K)
  SPECIFIC_HEAT_UNIT_TYPE_JKGK = 2;
  // BTU/(lb F)
  SPECIFIC_HEAT_UNIT_TYPE_BTULBF = 3;
}

// Describes the procedure for packaging your beverage
message PackagingProcedureType {
  string id = 1;
  string name = 2;
  VolumeType packaged_volume = 3;
  string description = 4;
  string notes = 5;
  repeated PackagingVesselType packaging_vessels = 6;
}

// PackagingVesselType - a per vessel representation of a packaging process
message PackagingVesselType {
  string id = 1;
  PackagingVesselTypeType type = 2;
  GravityType start_gravity = 3;
  string name = 4;
  string package_date = 5;
  TimeType step_time = 6;
  GravityType end_gravity = 7;
  VolumeType vessel_volume = 8;
  double vessel_quantity = 9;
  string description = 10;
  AcidityType start_ph = 11;
  double carbonation = 12;
  TemperatureType start_temperature = 13;
  AcidityType end_ph = 14;
  TemperatureType end_temperature = 15;

  enum PackagingVesselTypeType{
    PACKAGING_VESSEL_TYPE_TYPE_UNSPECIFIED = 0;
    // keg
    PACKAGING_VESSEL_TYPE_TYPE_KEG = 1;
    // bottle
    PACKAGING_VESSEL_TYPE_TYPE_BOTTLE = 2;
    // cask
    PACKAGING_VESSEL_TYPE_TYPE_CASK = 3;
    // tank
    PACKAGING_VESSEL_TYPE_TYPE_TANK = 4;
    // firkin
    PACKAGING_VESSEL_TYPE_TYPE_FIRKIN = 5;
    // other
    PACKAGING_VESSEL_TYPE_TYPE_OTHER = 6;
    // can
    PACKAGING_VESSEL_TYPE_TYPE_CAN = 7;
  }  

  repeated PackagingGraphicType graphics = 16;
}


// VarietyInformation collects the attributes of a hop variety to store as record information
message VarietyInformation{
  string id = 1;
  HopInventoryType inventory = 2;
  VarietyInformationType type = 3;
  // Oil Content information object.
  OilContentType oil_content = 4;
  //  Defined as the percentage of hop alpha lost in 6 months of storage.
  PercentType  percent_lost = 5;
  string product_id = 6;
  PercentType alpha_acid = 7;
  PercentType beta_acid = 8;
  string name = 9;
  string origin = 10;
  string substitutes = 11;
  string year = 12;
  HopVarietyBaseForm form = 13;
  string producer = 14;
  string notes = 15;


  enum VarietyInformationType{
    VARIETY_INFORMATION_TYPE_UNSPECIFIED = 0;
    // aroma
    VARIETY_INFORMATION_TYPE_AROMA = 1;
    // bittering
    VARIETY_INFORMATION_TYPE_BITTERING = 2;
    // flavor
    VARIETY_INFORMATION_TYPE_FLAVOR = 3;
    // aroma/bittering
    VARIETY_INFORMATION_TYPE_AROMA_BITTERING = 4;
    // bittering/flavor
    VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR = 5;
    // aroma/flavor
    VARIETY_INFORMATION_TYPE_AROMA_FLAVOR = 6;
    // aroma/bittering/flavor
    VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR = 7;
  }
}

enum HopVarietyBaseForm{
  HOP_VARIETY_BASE_FORM_UNSPECIFIED = 0;
  // extract
  HOP_VARIETY_BASE_FORM_EXTRACT = 1;
  // leaf
  HOP_VARIETY_BASE_FORM_LEAF = 2;
  // leaf (wet)
  HOP_VARIETY_BASE_FORM_LEAFWET = 3;
  // pellet
  HOP_VARIETY_BASE_FORM_PELLET = 4;
  // powder
  HOP_VARIETY_BASE_FORM_POWDER = 5;
  // plug
  HOP_VARIETY_BASE_FORM_PLUG = 6;
}


message HopInventoryType{
  oneof amount  {
    MassType mass = 1;
    VolumeType volume = 2;
  }
}

// oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
message OilContentType{
  PercentType polyphenols = 1;
  // The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
  double total_oil_ml_per_100g = 2;
  PercentType farnesene = 3;
  PercentType limonene = 4;
  PercentType nerol = 5;
  PercentType geraniol = 6;
  PercentType b_pinene = 7;
  PercentType linalool = 8;
  PercentType caryophyllene = 9;
  PercentType cohumulone = 10;
  PercentType xanthohumol = 11;
  PercentType humulene = 12;
  PercentType myrcene = 13;
  PercentType pinene = 14;
}

// WaterBase provides unique properties to identify individual records of  brewing water
message WaterBase{
  string id = 1;
  // Calcium occurs naturally in most water sources and is the principle cause of hardness.
  ConcentrationType calcium = 2;
  // Nitrite occurs naturally at low levels in some waters but is removed by treatment. It is sometime produced as a by-product when chloramine is used as a disinfectant.
  ConcentrationType nitrite = 3;
  // Occurs naturally in water sources and is derived through contact with rocks
  ConcentrationType chloride = 4;
  string name = 5;
  ConcentrationType potassium = 6;
  ConcentrationType carbonate = 7;
  // Iron occurs naturally in some water. High levels are treated to reduce the iron content. A number of water mains are made of iron. Brown discolouration complaints are associated with corroding iron mains. Iron is not harmful to health.
  ConcentrationType iron = 8;
  // Fluoride salts typically have distinctive bitter tastes, and are odorless.
  ConcentrationType flouride = 9;
  ConcentrationType sulfate = 10;
  // At levels of 10-30mg/l it is an important yeast nutrient, but above 30mg/l it can cause a sour/bitter taste to the beer.
  ConcentrationType magnesium = 11;
  string producer = 12;
  ConcentrationType bicarbonate = 13;
  // Nitrate occurs naturally in most source waters but concentrations can be increased as a result of fertiliser use. Where necessary concentrations in drinking water can be reduced by diluting with sources where nitrate levels are low or through specific treatment.
  ConcentrationType nitrate = 14;
  // Sodium is naturally present in many water sources. Domestic water softeners can increase the sodium concentration.
  ConcentrationType sodium = 15;
}

message DiastaticPowerRangeType{
  DiastaticPowerType minimum = 1;
  DiastaticPowerType maximum = 2;
}

message SpecificVolumeRangeType{
  SpecificVolumeType minimum = 1;
  SpecificVolumeType maximum = 2;
}

message AcidityRangeType{
  AcidityType minimum = 1;
  AcidityType maximum = 2;
}

// Representation of a graphic to be placed on a vessel.
message PackagingGraphicType {
  enum PositionType {
    POSITION_TYPE_UNSPECIFIED = 0;
    POSITION_TYPE_BODY_FRONT = 1;
    POSITION_TYPE_BODY_BACK = 2;
    POSITION_TYPE_BODY_WRAP_AROUND = 3;
    POSITION_TYPE_NECK_FRONT = 4;
    POSITION_TYPE_NECK_BACK = 5;
    POSITION_TYPE_NECK_WRAP_AROUND = 6;
    POSITION_TYPE_CAP = 7;
    POSITION_TYPE_CARRIER = 8;
  }

  PositionType position = 1;

   enum GraphicType {
    GRAPHIC_TYPE_UNSPECIFIED = 0;
    GRAPHIC_TYPE_SVG = 1;
    GRAPHIC_TYPE_SVGZ = 2;
    GRAPHIC_TYPE_AI = 3;
    GRAPHIC_TYPE_CDR = 4;
    GRAPHIC_TYPE_CDX = 5;
    GRAPHIC_TYPE_ODG = 6;
    GRAPHIC_TYPE_EPS = 7;
    GRAPHIC_TYPE_PDF = 8;
    GRAPHIC_TYPE_PNG = 9;
    GRAPHIC_TYPE_JPG = 10;
    GRAPHIC_TYPE_GIF = 11;
  }

  // File type
  GraphicType type = 2;

  // Base64 encoded file.
  string base64_data = 3;

  // URLS to hosted version of image.
  repeated string urls = 4;

  // Dots per inch.
  int32 dpi = 5;

  int64 width = 6;
  int64 height = 7;

  enum UnitsType {
    UNITS_TYPE_UNSPECIFIED = 0;
    UNITS_TYPE_MM = 1;
    UNITS_TYPE_IN = 2;
  }

  // The unit type which are used for measurements.
  UnitsType units = 8;
}