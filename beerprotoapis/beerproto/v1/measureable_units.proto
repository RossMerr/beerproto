/**
 * BeerProto
 *
 * Another beer format, written in protocol buffer.
 *
 * Copyright (c) 2020 Ross Merrigan
 */
syntax = "proto3";

package beerproto.v1;

import "google/protobuf/descriptor.proto";

extend google.protobuf.EnumValueOptions {
  optional string string_name = 123456789;
  optional string display_name = 123456788;
  optional ConversionVolumeUnit conversion_volume_unit = 123456787;
}

enum ArithmeticOperators {
  ARITHMETIC_OPERATORS_UNSPECIFIED = 0;
  ARITHMETIC_OPERATORS_ADDITION = 1;
  ARITHMETIC_OPERATORS_SUBTRACTION = 2;
  ARITHMETIC_OPERATORS_MULTIPLICATION = 3;
  ARITHMETIC_OPERATORS_DIVISION = 4;
}

message ConversionVolumeUnit {
  message ConversionVolumeUnitRate{
    VolumeUnit target = 1;
    ArithmeticOperators operator = 2;
    double value = 3;
   }

  repeated ConversionVolumeUnitRate rates = 1;
}


message VolumeType{
  double value = 1;
  VolumeUnit unit = 2;
}

enum VolumeUnit{
  VOLUME_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_volume_unit) = {
      rates: [
        {
       
        }
      ]
    }
  ];
  // ml
  VOLUME_UNIT_ML = 1[
    (string_name) = "ml",
    (display_name) = "mL",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: ARITHMETIC_OPERATORS_UNSPECIFIED,
          value: 0
        },
        {
          target: VOLUME_UNIT_L,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 1000
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 4.92892159375
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 14.78676478125
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 29.574
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 240
        },
        {
          target: VOLUME_UNIT_PT,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 473
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 3785
        },
        {
          target: VOLUME_UNIT_IFOZ,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 28.413
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 568
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 1137
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: ARITHMETIC_OPERATORS_MULTIPLICATION,
          value: 4546
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: ARITHMETIC_OPERATORS_DIVISION,
          value: 0.0000061102568971969
        },        
        {
          target: VOLUME_UNIT_BBL,
          operator: ARITHMETIC_OPERATORS_DIVISION,
          value: 0.0000085216791083274
        }
      ]
    }
  ];
  // l
  VOLUME_UNIT_L = 2 [
    (string_name) = "l",
    (display_name) = "L"
  ];
  // tsp
  VOLUME_UNIT_TSP = 3 [
    (string_name) = "tsp",
    (display_name) = "tsp"
  ];
  // tbsp
  VOLUME_UNIT_TBSP = 4[
    (string_name) = "tbsp",
    (display_name) = "Tbsp"
  ];
  // floz
  VOLUME_UNIT_FLOZ = 5[
    (string_name) = "floz",
    (display_name) = "fl oz"
  ];
  // cup
  VOLUME_UNIT_CUP = 6[
    (string_name) = "cup",
    (display_name) = "cup"
  ];
  // pt
  VOLUME_UNIT_PT = 7[
    (string_name) = "pt",
    (display_name) = "pt"
  ];
  // qt
  VOLUME_UNIT_QT = 8[
    (string_name) = "qt",
    (display_name) = "qt"
  ];
  // gal
  VOLUME_UNIT_GAL = 9[
    (string_name) = "gal",
    (display_name) = "gal"
  ];
  // bbl
  VOLUME_UNIT_BBL = 10 [
    (string_name) = "bbl",
    (display_name) = "bbl"
  ];
  // ifloz
  VOLUME_UNIT_IFOZ = 11[
    (string_name) = "ifox",
    (display_name) = "imp fl oz"
  ];
  // ipt
  VOLUME_UNIT_IPT = 12[
    (string_name) = "ipt",
    (display_name) = "imp pt"
  ];
  // iqt
  VOLUME_UNIT_IQT = 13[
    (string_name) = "iqt",
    (display_name) = "imp qt"
  ];
  // igal
  VOLUME_UNIT_IGAL = 14[
    (string_name) = "igal",
    (display_name) = "imp gal"
  ];
  // ibbl
  VOLUME_UNIT_IBBL = 15[
    (string_name) = "ibbl",
    (display_name) = "imp bbl"
  ];
}



message MassType{
  double value = 1;
  MassUnit unit = 2;
}

enum MassUnit{
  MASS_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // mg
  MASS_UNIT_MG = 1 [
    (string_name) = "mg",
    (display_name) = "mg"
  ];
  // g
  MASS_UNIT_G = 2 [
    (string_name) = "g",
    (display_name) = "g"
  ];
  // kg
  MASS_UNIT_KG = 3 [
    (string_name) = "kg",
    (display_name) = "kg"
  ];
  // lb
  MASS_UNIT_LB = 4 [
    (string_name) = "lb",
    (display_name) = "lb"
  ];
  // oz
  MASS_UNIT_OZ = 5 [
    (string_name) = "oz",
    (display_name) = "oz"
  ];
}


// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
message DiastaticPowerType{
  double value = 1;
  DiastaticPowerUnit unit = 2;
}

enum DiastaticPowerUnit{
  DIASTATIC_POWER_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // Lintner
  DIASTATIC_POWER_UNIT_LINTNER = 1[
    (string_name) = "Linter",
    (display_name) = "Linter"
  ];
  // Windisch–Kolbach
  DIASTATIC_POWER_UNIT_WK = 2[
    (string_name) = "WK",
    (display_name) = "Windisch–Kolbach"
  ];
}


message TemperatureType{
  double value = 1;
  TemperatureUnit unit = 2;
}

enum TemperatureUnit {
    TEMPERATURE_UNIT_UNSPECIFIED = 0[
      (string_name) = "UNSPECIFIED",
      (display_name) = "UNSPECIFIED"
    ];
    TEMPERATURE_UNIT_C = 1[
      (string_name) = "C",
      (display_name) = "C"
    ];
    TEMPERATURE_UNIT_F = 2[
      (string_name) = "F",
      (display_name) = "F"
    ];
}


message AcidityType{
  double value = 1;
  AcidityUnit unit = 2;
}

enum AcidityUnit{
    ACIDITY_UNIT_UNSPECIFIED = 0[
      (string_name) = "UNSPECIFIED",
      (display_name) = "UNSPECIFIED"
    ];
    ACIDITY_UNIT_PH = 1[
      (string_name) = "pH",
      (display_name) = "pH"
    ];
}


message TimeType{
  int64 value = 1;
  TimeUnit unit = 2;
}

 enum TimeUnit {
    TIME_UNIT_UNSPECIFIED = 0[
      (string_name) = "UNSPECIFIED",
      (display_name) = "UNSPECIFIED"
    ];
    // sec
    TIME_UNIT_SEC = 1[
      (string_name) = "sec",
      (display_name) = "Second"
    ];
    // min
    TIME_UNIT_MIN = 2[
      (string_name) = "min",
      (display_name) = "Minute"
    ];
    // hr
    TIME_UNIT_HR = 3[
      (string_name) = "hr",
      (display_name) = "Hour"
    ];
    // day
    TIME_UNIT_DAY = 4[
      (string_name) = "day",
      (display_name) = "Day"
    ];
    // week
    TIME_UNIT_WEEK = 5[
      (string_name) = "week",
      (display_name) = "Week"
    ];
  }

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
message ColorType{
  double value = 1;
  ColorUnit unit = 2;
}

enum ColorUnit {
  COLOR_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // EBC
  COLOR_UNIT_EBC = 1[
    (string_name) = "EBC",
    (display_name) = "EBC"
  ];
  // Lovi
  COLOR_UNIT_LOVI = 2[
    (string_name) = "Lovi",
    (display_name) = "Lovi"
  ];
  // SRM
  COLOR_UNIT_SRM = 3[
    (string_name) = "SRM",
    (display_name) = "SRM"
  ];
}


message CarbonationType {
  double value = 1;
  CarbonationUnit unit = 2;
}

enum CarbonationUnit {
  CARBONATION_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // vols
  CARBONATION_UNIT_VOLS = 1[
    (string_name) = "vols",
    (display_name) = "vols"
  ];
  // g/l
  CARBONATION_UNIT_GL = 2[
    (string_name) = "g/l",
    (display_name) = "g/l"
  ];
}


message BitternessType{
  double value = 1;
  BitternessUnit unit = 2;
}

enum BitternessUnit{
  BITTERNESS_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // IBUs
  BITTERNESS_UNIT_IBUS = 1[
    (string_name) = "IBUs",
    (display_name) = "IBUs"
  ];
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
message GravityType {
  double value = 1;
  GravityUnit unit = 2;
}

enum GravityUnit {
    GRAVITY_UNIT_UNSPECIFIED = 0[
      (string_name) = "UNSPECIFIED",
      (display_name) = "UNSPECIFIED"
    ];
    // sg
    GRAVITY_UNIT_SG = 1[
      (string_name) = "sg",
      (display_name) = "SG"
    ];
    // plato
    GRAVITY_UNIT_PLATO = 2[
      (string_name) = "plato",
      (display_name) = "Plato"
    ];
    // brix
    GRAVITY_UNIT_BRIX = 3[
      (string_name) = "brix",
      (display_name) = "BRIX"
    ];
}


message SpecificHeatType{
  double value = 1;
  SpecificHeatUnit unit = 2;
}

enum SpecificHeatUnit{
  SPECIFIC_HEAT_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // Cal/(g C)
  SPECIFIC_HEAT_UNIT_CALGC = 1[
    (string_name) = "Cal/(g C)",
    (display_name) = "Cal/(g C)"
  ];
  // J/(kg K)
  SPECIFIC_HEAT_UNIT_JKGK = 2[
    (string_name) = "J/(kg K)",
    (display_name) = "J/(kg K)"
  ];
  // BTU/(lb F)
  SPECIFIC_HEAT_UNIT_BTULBF = 3[
    (string_name) = "BTU/(lb F)",
    (display_name) = "BTU/(lb F)"
  ];
}


message ConcentrationType{
  double value = 1;
  ConcentrationUnit unit = 2;
}

enum ConcentrationUnit{
  CONCENTRATION_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // ppm
  CONCENTRATION_UNIT_PPM = 1[
    (string_name) = "ppm",
    (display_name) = "ppm"
  ];
  // ppb
  CONCENTRATION_UNIT_PPB = 2[
    (string_name) = "ppb",
    (display_name) = "ppb"
  ];
  // mg/l
  CONCENTRATION_UNIT_MGL = 3[
    (string_name) = "mg/l",
    (display_name) = "mg/l"
  ];
  // mg/100g
  CONCENTRATION_UNIT_MG100L = 4[
    (string_name) = "mg/100g",
    (display_name) = "mg/100g"
  ];
}


message SpecificVolumeType{
  double value = 1;
  SpecificVolumeUnit unit = 2;
}

enum SpecificVolumeUnit{
  SPECIFIC_VOLUME_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // qt/lb
  SPECIFIC_VOLUME_UNIT_QTLB = 1[
    (string_name) = "qt/lb",
    (display_name) = "qt/lb"
  ];
  // gal/lb
  SPECIFIC_VOLUME_UNIT_GALLB = 2[
    (string_name) = "gal/lb",
    (display_name) = "gal/lb"
  ];
  // gal/oz
  SPECIFIC_VOLUME_UNIT_GALOZ = 3[
    (string_name) = "gal/oz",
    (display_name) = "gal/oz"
  ];
  // l/g
  SPECIFIC_VOLUME_UNIT_LG = 4[
    (string_name) = "l/g",
    (display_name) = "l/g"
  ];
  // l/kg
  SPECIFIC_VOLUME_UNIT_LKG = 5[
    (string_name) = "l/kg",
    (display_name) = "l/kg"
  ];
  // floz/oz
  SPECIFIC_VOLUME_UNIT_FLOZOZ = 6[
    (string_name) = "floz/oz",
    (display_name) = "floz/oz"
  ];
  // m^3/kg
  SPECIFIC_VOLUME_UNIT_M3KG = 7[
    (string_name) = "m^3/kg",
    (display_name) = "m^3/kg"
  ];
  // ft^3/lb
  SPECIFIC_VOLUME_UNIT_FT3LB = 8[
    (string_name) = "ft^3/lb",
    (display_name) = "ft^3/lb"
  ];
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
message UnitType {
  double value = 1;
  UnitUnit unit = 2;
}

enum UnitUnit {
  UNIT_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // 1
  UNIT_UNIT_ONE = 1[
    (string_name) = "1",
    (display_name) = "One"
  ];
  // unit
  UNIT_UNIT_UNIT = 2[
    (string_name) = "unit",
    (display_name) = "Unit"
  ];
  // each
  UNIT_UNIT_EACH = 3[
    (string_name) = "each",
    (display_name) = "Each"
  ];
  // dimensionless
  UNIT_UNIT_DIMENSIONLESS = 4[
    (string_name) = "dimensionless",
    (display_name) = "Dimensionless"
  ];
  // pkg
  UNIT_UNIT_PKG = 5[
    (string_name) = "pkg",
    (display_name) = "Package"
  ];
}

message PercentType{
  double value = 1;
  PercentUnit unit = 2;
}

enum PercentUnit{
  PERCENT_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // %
  PERCENT_UNIT_PERCENT_SIGN = 1[
    (string_name) = "%",
    (display_name) = "%"
  ];
}

message ViscosityType{
  double value = 1;
  ViscosityUnit unit = 2;
}

enum ViscosityUnit {
  VISCOSITY_UNIT_UNSPECIFIED = 0[
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // cP
  VISCOSITY_UNIT_CP = 1[
    (string_name) = "cP",
    (display_name) = "cP"
  ];
  // mPa-s
  VISCOSITY_UNIT_MPAS = 2[
    (string_name) = "mPa-s",
    (display_name) = "mPa-s"
  ];
}

message CarbonationRangeType{
  CarbonationType minimum = 1;
  CarbonationType maximum = 2;
}

message BitternessRangeType{
  BitternessType minimum = 1;
  BitternessType maximum = 2;
}

message TemperatureRangeType{
  TemperatureType minimum = 1;
  TemperatureType maximum = 2;
}

message ColorRangeType{
  ColorType minimum = 1;
  ColorType maximum = 2;
}

message GravityRangeType{
  GravityType minimum = 1;
  GravityType maximum = 2;
}

message PercentRangeType{
  PercentType minimum = 1;
  PercentType maximum = 2;
}

message TimeRangeType{
  TimeType minimum = 1;
  TimeType maximum = 2;
}

message ViscosityRangeType{
  ViscosityType minimum = 1;
  ViscosityType maximum = 2;
}

message DiastaticPowerRangeType{
  DiastaticPowerType minimum = 1;
  DiastaticPowerType maximum = 2;
}

message SpecificVolumeRangeType{
  SpecificVolumeType minimum = 1;
  SpecificVolumeType maximum = 2;
}

message AcidityRangeType{
  AcidityType minimum = 1;
  AcidityType maximum = 2;
}

message ConcentrationRangeType{
  ConcentrationType minimum = 1;
  ConcentrationType maximum = 2;
}

