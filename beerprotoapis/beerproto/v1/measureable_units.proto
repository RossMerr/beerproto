/**
 * BeerProto
 *
 * Another beer format, written in protocol buffer.
 *
 * Copyright (c) 2020 Ross Merrigan
 */
syntax = "proto3";

package beerproto.v1;

import "beerproto/v1/expression.proto";
import "google/protobuf/descriptor.proto";

extend google.protobuf.EnumValueOptions {
  optional string string_name = 123456789;
  optional string display_name = 123456788;
  optional ConversionVolumeUnit conversion_volume_unit = 123456787;
  optional ConversionMassUnit conversion_mass_unit = 123456786;
  optional ConversionDiastaticPowerUnit conversion_diastatic_power_unit = 123456785;
  optional ConversionTemperatureUnit conversion_temperature_unit = 123456784;
  optional ConversionColorUnit conversion_color_unit = 123456782;
  optional ConversionGravityUnit conversion_gravity_unit = 123456781;
}

message ConversionVolumeUnit {
  message ConversionVolumeUnitRate {
    VolumeUnit target = 1;
    BinaryArithmetic operator = 2;
    double value = 3;
  }

  repeated ConversionVolumeUnitRate rates = 1;
}

message VolumeType {
  double value = 1;
  VolumeUnit unit = 2;
}

enum VolumeUnit {
  VOLUME_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_volume_unit) = {
      rates: [
{}
      ]
    }
  ];
  // ml
  VOLUME_UNIT_ML = 1 [
    (string_name) = "ml",
    (display_name) = "mL",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 0
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1000
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4.92892
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 14.7868
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 29.5735
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 240
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 473.176
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 946.353
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 3785.41
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 28.4131
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 568.261
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1136.52
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4546.09
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0000061102568971969
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0000085216791083274
        }
      ]
    }
  ];
  // l
  VOLUME_UNIT_L = 2 [
    (string_name) = "l",
    (display_name) = "L",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1000
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 202.884
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 67.628045403686
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 33.814
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3.51951
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2.11338
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.05669
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 3.78541
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 35.1951
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.75975
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.13652
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4.54609
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0061102568971969
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0000085216791083274
        }
      ]
    }
  ];
  // tsp
  VOLUME_UNIT_TSP = 3 [
    (string_name) = "tsp",
    (display_name) = "tsp",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4.92892
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 202.884
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 3
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 6
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 48.6922
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 96
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 192
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 768
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 5.76456
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 115.291
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 230.582
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 922.33
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.000030116977163954
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.000042002688172043
        }
      ]
    }
  ];
  // tbsp
  VOLUME_UNIT_TBSP = 4 [
    (string_name) = "tbsp",
    (display_name) = "Tbsp",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 14.7868
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 67.628
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 16.2307
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 32
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 64
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 256
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.92152
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 38.4304
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 76.8608
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 307.443
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.000090350931491861
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.00012600806451613
        }
      ]
    }
  ];
  // floz
  VOLUME_UNIT_FLOZ = 5 [
    (string_name) = "floz",
    (display_name) = "fl oz",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 29.5735
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 33.814
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 6
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 8.11537
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 16
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 32
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 128
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.04084
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 38.4304
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 38.4304
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 153.722
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.00018070186298372
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 3968
        }
      ]
    }
  ];
  // cup
  VOLUME_UNIT_CUP = 6 [
    (string_name) = "cup",
    (display_name) = "cup",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 240
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4.16667
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 48.6922
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 16.2307
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 8.11537
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.97157
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 3.94314
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 15.7725
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 8.44682
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2.36776
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4.73551
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 18.942
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0014456149038698
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0020161290322581
        }
      ]
    }
  ];
  // pt
  VOLUME_UNIT_PT = 7 [
    (string_name) = "pt",
    (display_name) = "pt",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 473.176
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2.11338
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 96
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 32
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 16
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2113.38
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 8
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 16.6535
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2.4019
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 9.6076
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0028912298077395
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0040322580645161
        }
      ]
    }
  ];
  // qt
  VOLUME_UNIT_QT = 8 [
    (string_name) = "qt",
    (display_name) = "qt",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 946.353
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.05669
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 192
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 64
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 32
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3.94314
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 33.307
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.66535
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4.8038
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0057824596154791
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0080645161290323
        }
      ]
    }
  ];
  // gal
  VOLUME_UNIT_GAL = 9 [
    (string_name) = "gal",
    (display_name) = "gal",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3785.41
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3.78541
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 768
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 256
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 128
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 15.7725
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 8
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 133.228
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 6.66139
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3.3307
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.023129838461916
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.032258064516129
        }
      ]
    }
  ];
  // bbl
  VOLUME_UNIT_BBL = 10 [
    (string_name) = "bbl",
    (display_name) = "bbl",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 0.0000085216791083274
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 0.0085216791083274
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 23808
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 7936
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3968
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 496
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 248
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 248
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 31
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4130.0639557598
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 06.50319778799
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 103.25159889399
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 25.812899723499
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.71702499231941
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        }
      ]
    }
  ];
  // ifloz
  VOLUME_UNIT_IFLOZ = 11 [
    (string_name) = "ifloz",
    (display_name) = "imp fl oz",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 28.4131
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 35.1951
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 5.76456
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.92152
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.04084
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 8.44682
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 16.6535
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 33.307
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 133.228
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 133.228
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 6.66139
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 3.3307
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.00017361111111111
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.00024212700110985
        }
      ]
    }
  ];
  // ipt
  VOLUME_UNIT_IPT = 12 [
    (string_name) = "ipt",
    (display_name) = "imp pt",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 568.261
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.75975
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 115.291
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 38.4304
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 19.2152
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2.36776
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1.66535
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 6.66139
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 20
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 8
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0000045211226851852
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.004842540022197
        }
      ]
    }
  ];
  // iqt
  VOLUME_UNIT_IQT = 13 [
    (string_name) = "iqt",
    (display_name) = "imp qt",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1136.52
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.13652
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 76.8608
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 230.582
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 38.4304
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4.73551
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2.4019
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 3.3307
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 40
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 4
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.0069444444444444
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.009685080044394
        }
      ]
    }
  ];
  // igal
  VOLUME_UNIT_IGAL = 14 [
    (string_name) = "igal",
    (display_name) = "imp gal",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4546.09
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4.54609
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 922.33
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 307.443
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 153.722
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 18.942
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 9.6076
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4.8038
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.20095
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 160
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 8
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 4
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.027777777777778
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0.038740320177576
        }
      ]
    }
  ];
  // ibbl
  VOLUME_UNIT_IBBL = 15 [
    (string_name) = "ibbl",
    (display_name) = "imp bbl",
    (conversion_volume_unit) = {
      rates: [
        {
          target: VOLUME_UNIT_ML,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 0.0000061102568971969
        },
        {
          target: VOLUME_UNIT_L,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 0.0061102568971969
        },
        {
          target: VOLUME_UNIT_TSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 922.32954278773
        },
        {
          target: VOLUME_UNIT_TBSP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 307.44318092924
        },
        {
          target: VOLUME_UNIT_FLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 153.72159046462
        },
        {
          target: VOLUME_UNIT_CUP,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 691.7471570908
        },
        {
          target: VOLUME_UNIT_PT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 345.8735785454
        },
        {
          target: VOLUME_UNIT_QT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 172.9367892727
        },
        {
          target: VOLUME_UNIT_GAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 43.234197318175
        },
        {
          target: VOLUME_UNIT_IFLOZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 5760
        },
        {
          target: VOLUME_UNIT_IPT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 288
        },
        {
          target: VOLUME_UNIT_IQT,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 144
        },
        {
          target: VOLUME_UNIT_IGAL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 36
        },
        {
          target: VOLUME_UNIT_IBBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: VOLUME_UNIT_BBL,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1.3946515263927
        }
      ]
    }
  ];
}

message MassType {
  double value = 1;
  MassUnit unit = 2;
}

message ConversionMassUnit {
  message ConversionMassUnitRate {
    MassUnit target = 1;
    BinaryArithmetic operator = 2;
    double value = 3;
  }

  repeated ConversionMassUnitRate rates = 1;
}

enum MassUnit {
  MASS_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_mass_unit) = {
      rates: [
{}
      ]
    }
  ];
  // mg
  MASS_UNIT_MG = 1 [
    (string_name) = "mg",
    (display_name) = "mg",
    (conversion_mass_unit) = {
      rates: [
        {
          target: MASS_UNIT_MG,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: MASS_UNIT_G,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1000
        },
        {
          target: MASS_UNIT_KG,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1e+6
        },
        {
          target: MASS_UNIT_LB,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 453592
        },
        {
          target: MASS_UNIT_OZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 28349.5
        }
      ]
    }
  ];
  // g
  MASS_UNIT_G = 2 [
    (string_name) = "g",
    (display_name) = "g",
    (conversion_mass_unit) = {
      rates: [
        {
          target: MASS_UNIT_MG,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1000
        },
        {
          target: MASS_UNIT_G,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: MASS_UNIT_KG,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 1000
        },
        {
          target: MASS_UNIT_LB,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 453.592
        },
        {
          target: MASS_UNIT_OZ,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 28.3495
        }
      ]
    }
  ];
  // kg
  MASS_UNIT_KG = 3 [
    (string_name) = "kg",
    (display_name) = "kg",
    (conversion_mass_unit) = {
      rates: [
        {
          target: MASS_UNIT_MG,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1e-6
        },
        {
          target: MASS_UNIT_G,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 1000
        },
        {
          target: MASS_UNIT_KG,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: MASS_UNIT_LB,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 2.20462
        },
        {
          target: MASS_UNIT_OZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 35.274
        }
      ]
    }
  ];
  // lb
  MASS_UNIT_LB = 4 [
    (string_name) = "lb",
    (display_name) = "lb",
    (conversion_mass_unit) = {
      rates: [
        {
          target: MASS_UNIT_MG,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 453592
        },
        {
          target: MASS_UNIT_G,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 453.592
        },
        {
          target: MASS_UNIT_KG,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 2.20462
        },
        {
          target: MASS_UNIT_LB,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        },
        {
          target: MASS_UNIT_OZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 16
        }
      ]
    }
  ];
  // oz
  MASS_UNIT_OZ = 5 [
    (string_name) = "oz",
    (display_name) = "oz",
    (conversion_mass_unit) = {
      rates: [
        {
          target: MASS_UNIT_MG,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 28349.5
        },
        {
          target: MASS_UNIT_G,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 28.3495
        },
        {
          target: MASS_UNIT_KG,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 35.274
        },
        {
          target: MASS_UNIT_LB,
          operator: BINARY_ARITHMETIC_DIVISION,
          value: 16
        },
        {
          target: MASS_UNIT_OZ,
          operator: BINARY_ARITHMETIC_MULTIPLICATION,
          value: 0
        }
      ]
    }
  ];
}

// Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
message DiastaticPowerType {
  double value = 1;
  DiastaticPowerUnit unit = 2;
}

message ConversionDiastaticPowerUnit {
  message ConversionDiastaticPowerUnitRate {
    DiastaticPowerUnit target = 1;
    ExpressionTree tree = 2;
  }

  repeated ConversionDiastaticPowerUnitRate rates = 1;
}

enum DiastaticPowerUnit {
  DIASTATIC_POWER_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_diastatic_power_unit) = {
      rates: []
    }
  ];
  // Lintner
  DIASTATIC_POWER_UNIT_LINTNER = 1 [
    (string_name) = "Linter",
    (display_name) = "Linter",
    (conversion_diastatic_power_unit) = {
      rates: [
        {
          target: DIASTATIC_POWER_UNIT_WK,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_SUBTRACTION,
              binary_left: {
                operator: BINARY_ARITHMETIC_MULTIPLICATION,
                unary_left: {double: 3.5}
                parameter_right: {parameter: "x"}
              },
              unary_right: {double: 16},
            }
          }
        }
      ]
    }
  ];
  // Windisch–Kolbach
  DIASTATIC_POWER_UNIT_WK = 2 [
    (string_name) = "WK",
    (display_name) = "Windisch–Kolbach",
    (conversion_diastatic_power_unit) = {
      rates: [
        {
          target: DIASTATIC_POWER_UNIT_LINTNER,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_DIVISION,
              binary_left: {
                operator: BINARY_ARITHMETIC_ADDITION,
                parameter_left: {parameter: "x"}
                unary_right: {double: 16}
              },
              unary_right: {double: 3.5}
            }
          }
        }
      ]
    }
  ];
}

message TemperatureType {
  double value = 1;
  TemperatureUnit unit = 2;
}

message ConversionTemperatureUnit {
  message ConversionTemperatureUnitRate {
    TemperatureUnit target = 1;
    ExpressionTree tree = 2;
  }

  repeated ConversionTemperatureUnitRate rates = 1;
}

enum TemperatureUnit {
  TEMPERATURE_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_temperature_unit) = {
      rates: []
    }
  ];
  TEMPERATURE_UNIT_C = 1 [
    (string_name) = "C",
    (display_name) = "C",
    (conversion_temperature_unit) = {
      rates: [
        {
          target: TEMPERATURE_UNIT_F,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_ADDITION,
              binary_left: {
                operator: BINARY_ARITHMETIC_DIVISION,
                binary_left: {
                  operator: BINARY_ARITHMETIC_MULTIPLICATION,
                  parameter_left: {parameter: "x"}
                  unary_right: {double: 9}
                },
                unary_right: {double: 5}
              },
              unary_right: {double: 32}
            }
          }
        }
      ]
    }
  ];
  TEMPERATURE_UNIT_F = 2 [
    (string_name) = "F",
    (display_name) = "F",
    (conversion_temperature_unit) = {
      rates: [
        {
          target: TEMPERATURE_UNIT_C,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_DIVISION,
              binary_left: {
                operator: BINARY_ARITHMETIC_MULTIPLICATION,
                binary_left: {
                  operator: BINARY_ARITHMETIC_SUBTRACTION,
                  parameter_left: {parameter: "x"}
                  unary_right: {double: 32}
                },
                unary_right: {double: 5}
              },
              unary_right: {double: 9}
            }
          }
        }
      ]
    }
  ];
}

message AcidityType {
  double value = 1;
  AcidityUnit unit = 2;
}

enum AcidityUnit {
  ACIDITY_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  ACIDITY_UNIT_PH = 1 [
    (string_name) = "pH",
    (display_name) = "pH"
  ];
}

message TimeType {
  int64 value = 1;
  TimeUnit unit = 2;
}

enum TimeUnit {
  TIME_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // sec
  TIME_UNIT_SEC = 1 [
    (string_name) = "sec",
    (display_name) = "Second"
  ];
  // min
  TIME_UNIT_MIN = 2 [
    (string_name) = "min",
    (display_name) = "Minute"
  ];
  // hr
  TIME_UNIT_HR = 3 [
    (string_name) = "hr",
    (display_name) = "Hour"
  ];
  // day
  TIME_UNIT_DAY = 4 [
    (string_name) = "day",
    (display_name) = "Day"
  ];
  // week
  TIME_UNIT_WEEK = 5 [
    (string_name) = "week",
    (display_name) = "Week"
  ];
}

// ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
message ColorType {
  double value = 1;
  ColorUnit unit = 2;
}

message ConversionColorUnit {
  message ConversionColorUnitRate {
    ColorUnit target = 1;
    ExpressionTree tree = 2;
  }

  repeated ConversionColorUnitRate rates = 1;
}

enum ColorUnit {
  COLOR_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_color_unit) = {
      rates: []
    }
  ];
  // EBC
  COLOR_UNIT_EBC = 1 [
    (string_name) = "EBC",
    (display_name) = "EBC",
    (conversion_color_unit) = {
      rates: [
        {
          target: COLOR_UNIT_LOVI,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_DIVISION,
              binary_left: {
                operator: BINARY_ARITHMETIC_ADDITION,
                binary_left: {
                  operator: BINARY_ARITHMETIC_DIVISION,
                  parameter_left: {parameter: "x"}
                  unary_right: {double: 1.97}
                },
                unary_right: {double: 0.76}
              },
              unary_right: {double: 1.3546}
            }
          }
        },
        {
          target: COLOR_UNIT_SRM,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_MULTIPLICATION,
              parameter_left: {parameter: "x"}
              unary_right: {double: 0.508}
            }
          }
        }
      ]
    }
  ];
  // Lovi
  COLOR_UNIT_LOVI = 2 [
    (string_name) = "Lovi",
    (display_name) = "Lovi",
    (conversion_color_unit) = {
      rates: [
        {
          target: COLOR_UNIT_EBC,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_MULTIPLICATION,
              binary_left: {
                operator: BINARY_ARITHMETIC_SUBTRACTION,
                binary_left: {
                  operator: BINARY_ARITHMETIC_MULTIPLICATION,
                  unary_left: {double: 1.3546}
                  parameter_right: {parameter: "x"}
                },
                unary_right: {double: 0.76}
              },
              unary_right: {double: 1.97}
            }
          }
        },
        {
          target: COLOR_UNIT_SRM,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_SUBTRACTION,
              binary_left: {
                operator: BINARY_ARITHMETIC_MULTIPLICATION,
                unary_left: {double: 1.3546}
                parameter_right: {parameter: "x"}
              },
              unary_right: {double: 0.76}
            }
          }
        }
      ]
    }
  ];
  // SRM
  COLOR_UNIT_SRM = 3 [
    (string_name) = "SRM",
    (display_name) = "SRM",
    (conversion_color_unit) = {
      rates: [
        {
          target: COLOR_UNIT_EBC,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_MULTIPLICATION,
              parameter_left: {parameter: "x"},
              unary_right: {double: 1.97}
            }
          }
        },
        {
          target: COLOR_UNIT_LOVI,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_DIVISION,
              binary_left: {
                operator: BINARY_ARITHMETIC_ADDITION,
                parameter_left: {parameter: "x"},
                unary_right: {double: 0.76}
              },
              unary_right: {double: 1.3546}
            }
          }
        }
      ]
    }
  ];
}

message CarbonationType {
  double value = 1;
  CarbonationUnit unit = 2;
}

enum CarbonationUnit {
  CARBONATION_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // vols
  CARBONATION_UNIT_VOLS = 1 [
    (string_name) = "vols",
    (display_name) = "vols"
  ];
  // g/l
  CARBONATION_UNIT_GL = 2 [
    (string_name) = "g/l",
    (display_name) = "g/l"
  ];
}

message BitternessType {
  double value = 1;
  BitternessUnit unit = 2;
}

enum BitternessUnit {
  BITTERNESS_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // IBUs
  BITTERNESS_UNIT_IBUS = 1 [
    (string_name) = "IBUs",
    (display_name) = "IBUs"
  ];
}

// Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
message GravityType {
  double value = 1;
  GravityUnit unit = 2;
}

message ConversionGravityUnit {
  message ConversionGravityUnitRate {
    GravityUnit target = 1;
    ExpressionTree tree = 2;
  }

  repeated ConversionGravityUnitRate rates = 1;
}

enum GravityUnit {
  GRAVITY_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED",
    (conversion_gravity_unit) = {
      rates: []
    }
  ];
  // sg
  GRAVITY_UNIT_SG = 1 [
    (string_name) = "sg",
    (display_name) = "SG",
    (conversion_gravity_unit) = {
      rates: [
        {
          target: GRAVITY_UNIT_PLATO,
          tree: {
            expression: {
              operator: BINARY_ARITHMETIC_SUBTRACTION,
              binary_left: {
                operator: BINARY_ARITHMETIC_ADDITION,
                binary_left: {
                  operator: BINARY_ARITHMETIC_SUBTRACTION,
                  binary_left: {
                    operator: BINARY_ARITHMETIC_MULTIPLICATION,
                    unary_left: {double: 135.997}
                    binary_right: {
                      operator: BINARY_ARITHMETIC_POWER,
                      parameter_left: {parameter: "x"}
                      unary_right: {double: 3}
                    },
                  },
                  binary_right: {
                    operator: BINARY_ARITHMETIC_MULTIPLICATION,
                    unary_left: {double: 630.272}
                    binary_right: {
                      operator: BINARY_ARITHMETIC_POWER,
                      parameter_left: {parameter: "x"}
                      unary_right: {double: 2}
                    },
                  }
                },
                binary_right: {
                  operator: BINARY_ARITHMETIC_MULTIPLICATION,
                  unary_left: {double: 1111.14},
                  parameter_right: {parameter: "x"}
                }
              },
              unary_right: {double: 616.868}
            }
          }
        }
      ]
    }
  ];
  // plato
  GRAVITY_UNIT_PLATO = 2 [
    (string_name) = "plato",
    (display_name) = "Plato"
  ];
  // brix
  GRAVITY_UNIT_BRIX = 3 [
    (string_name) = "brix",
    (display_name) = "BRIX"
  ];
}

message SpecificHeatType {
  double value = 1;
  SpecificHeatUnit unit = 2;
}

enum SpecificHeatUnit {
  SPECIFIC_HEAT_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // Cal/(g C)
  SPECIFIC_HEAT_UNIT_CALGC = 1 [
    (string_name) = "Cal/(g C)",
    (display_name) = "Cal/(g C)"
  ];
  // J/(kg K)
  SPECIFIC_HEAT_UNIT_JKGK = 2 [
    (string_name) = "J/(kg K)",
    (display_name) = "J/(kg K)"
  ];
  // BTU/(lb F)
  SPECIFIC_HEAT_UNIT_BTULBF = 3 [
    (string_name) = "BTU/(lb F)",
    (display_name) = "BTU/(lb F)"
  ];
}

message ConcentrationType {
  double value = 1;
  ConcentrationUnit unit = 2;
}

enum ConcentrationUnit {
  CONCENTRATION_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // ppm
  CONCENTRATION_UNIT_PPM = 1 [
    (string_name) = "ppm",
    (display_name) = "ppm"
  ];
  // ppb
  CONCENTRATION_UNIT_PPB = 2 [
    (string_name) = "ppb",
    (display_name) = "ppb"
  ];
  // mg/l
  CONCENTRATION_UNIT_MGL = 3 [
    (string_name) = "mg/l",
    (display_name) = "mg/l"
  ];
  // mg/100g
  CONCENTRATION_UNIT_MG100L = 4 [
    (string_name) = "mg/100g",
    (display_name) = "mg/100g"
  ];
}

message SpecificVolumeType {
  double value = 1;
  SpecificVolumeUnit unit = 2;
}

enum SpecificVolumeUnit {
  SPECIFIC_VOLUME_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // qt/lb
  SPECIFIC_VOLUME_UNIT_QTLB = 1 [
    (string_name) = "qt/lb",
    (display_name) = "qt/lb"
  ];
  // gal/lb
  SPECIFIC_VOLUME_UNIT_GALLB = 2 [
    (string_name) = "gal/lb",
    (display_name) = "gal/lb"
  ];
  // gal/oz
  SPECIFIC_VOLUME_UNIT_GALOZ = 3 [
    (string_name) = "gal/oz",
    (display_name) = "gal/oz"
  ];
  // l/g
  SPECIFIC_VOLUME_UNIT_LG = 4 [
    (string_name) = "l/g",
    (display_name) = "l/g"
  ];
  // l/kg
  SPECIFIC_VOLUME_UNIT_LKG = 5 [
    (string_name) = "l/kg",
    (display_name) = "l/kg"
  ];
  // floz/oz
  SPECIFIC_VOLUME_UNIT_FLOZOZ = 6 [
    (string_name) = "floz/oz",
    (display_name) = "floz/oz"
  ];
  // m^3/kg
  SPECIFIC_VOLUME_UNIT_M3KG = 7 [
    (string_name) = "m^3/kg",
    (display_name) = "m^3/kg"
  ];
  // ft^3/lb
  SPECIFIC_VOLUME_UNIT_FT3LB = 8 [
    (string_name) = "ft^3/lb",
    (display_name) = "ft^3/lb"
  ];
}

// UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
message UnitType {
  double value = 1;
  UnitUnit unit = 2;
}

enum UnitUnit {
  UNIT_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // 1
  UNIT_UNIT_ONE = 1 [
    (string_name) = "1",
    (display_name) = "One"
  ];
  // unit
  UNIT_UNIT_UNIT = 2 [
    (string_name) = "unit",
    (display_name) = "Unit"
  ];
  // each
  UNIT_UNIT_EACH = 3 [
    (string_name) = "each",
    (display_name) = "Each"
  ];
  // dimensionless
  UNIT_UNIT_DIMENSIONLESS = 4 [
    (string_name) = "dimensionless",
    (display_name) = "Dimensionless"
  ];
  // pkg
  UNIT_UNIT_PKG = 5 [
    (string_name) = "pkg",
    (display_name) = "Package"
  ];
}

message PercentType {
  double value = 1;
  PercentUnit unit = 2;
}

enum PercentUnit {
  PERCENT_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // %
  PERCENT_UNIT_PERCENT_SIGN = 1 [
    (string_name) = "%",
    (display_name) = "%"
  ];
}

message ViscosityType {
  double value = 1;
  ViscosityUnit unit = 2;
}

enum ViscosityUnit {
  VISCOSITY_UNIT_UNSPECIFIED = 0 [
    (string_name) = "UNSPECIFIED",
    (display_name) = "UNSPECIFIED"
  ];
  // cP
  VISCOSITY_UNIT_CP = 1 [
    (string_name) = "cP",
    (display_name) = "cP"
  ];
  // mPa-s
  VISCOSITY_UNIT_MPAS = 2 [
    (string_name) = "mPa-s",
    (display_name) = "mPa-s"
  ];
}

message CarbonationRangeType {
  CarbonationType minimum = 1;
  CarbonationType maximum = 2;
}

message BitternessRangeType {
  BitternessType minimum = 1;
  BitternessType maximum = 2;
}

message TemperatureRangeType {
  TemperatureType minimum = 1;
  TemperatureType maximum = 2;
}

message ColorRangeType {
  ColorType minimum = 1;
  ColorType maximum = 2;
}

message GravityRangeType {
  GravityType minimum = 1;
  GravityType maximum = 2;
}

message PercentRangeType {
  PercentType minimum = 1;
  PercentType maximum = 2;
}

message TimeRangeType {
  TimeType minimum = 1;
  TimeType maximum = 2;
}

message ViscosityRangeType {
  ViscosityType minimum = 1;
  ViscosityType maximum = 2;
}

message DiastaticPowerRangeType {
  DiastaticPowerType minimum = 1;
  DiastaticPowerType maximum = 2;
}

message SpecificVolumeRangeType {
  SpecificVolumeType minimum = 1;
  SpecificVolumeType maximum = 2;
}

message AcidityRangeType {
  AcidityType minimum = 1;
  AcidityType maximum = 2;
}

message ConcentrationRangeType {
  ConcentrationType minimum = 1;
  ConcentrationType maximum = 2;
}
